namespace ca.mcgill.ecse321.scorekeeper.model;

/**
 * Domain object that stores data relating to players.
 * Each Player has multiple Shots an Infractions.
 * Each Player also belongs to a Team and a League.
 * This object is also able to calculate statistics
 * about the players in the team (e.g. their total
 * number of successful goals). Note that a Goalie
 * is also a kind of Player.
 *
 * @param name          the name of the Player
 * @param jerseyNumber  the Player's jersey number
 *
 * @see Team
 * @see Shot
 * @see Infraction
 * @see Goalie
 * @see League
 */
class Player
{
  // Umple Code//

  1 -- * Shot shots;
  1 -- * Infraction infractions;
  String name;
  int jerseyNumber;

  // Java Code //

  /**
   * Method returning the total number of successful Shots.
   *
   * @return total number of successful Shots
   *
   * @see Shot
   */
  public int getSuccessfulShotCount()
  {
    int res = 0;
    for(Shot shot : this.getShots())
    {
      if(shot.getGoal())
      {
        res++;
      }
    }
    return res;
  }

  /**
   * Method returning the total number of Infractions resulting in penalty kicks.
   *
   * @return total number of Infractions resulting in penalty kicks
   *
   * @see Infraction
   */
  public int getPenaltyShotCount()
  {
    int res = 0;
    for(Infraction inf : this.getInfractions())
    {
      if(inf.getPenaltyShot())
      {
        res++;
      }
    }
    return res;
  }
  
  /**
   * Method returning the total number of Infractions resulting in red cards.
   *
   * @return total number of Infractions resulting in red cards
   *
   * @see Infraction
   */
  public int getRedInfractionCount()
  {
    return this.getColorInfractionCount(Color.RED);
  }

  /**
   * Method returning the total number of Infractions resulting in yellow cards.
   *
   * @return total number of Infractions resulting in yellow cards
   *
   * @see Infraction
   */
  public int getYellowInfractionCount()
  {
    return this.getColorInfractionCount(Color.YELLOW);
  }

  /**
   * Method returning the total number of Infractions resulting in a specified color of card .
   *
   * @param color color of the card to count infractions for
   *
   * @return total number of Infractions resulting in a specified color of card
   *
   * @see Infraction
   */
  private int getColorInfractionCount(Color color)
  {
    int res = 0;
    for(Infraction inf : this.getInfractions())
    {
      if(inf.getColor() == color)
      {
        res++;
      }
    }
    return res;
  }

  /**
   * Inner class to allow League to sort players by name.
   *
   * @see League
   */
  public static Comparator<Player> COMPARE_BY_NAME = new Comparator<Player>()
  {
  	public int compare(Player one, Player other)
  	{
  		return one.name.compareTo(other.name);
  	}
  };
  
  /**
   * Inner class to allow League to sort players by their jersey number.
   *
   * @see League
   */
  public static Comparator<Player> COMPARE_BY_JERSEY = new Comparator<Player>()
  {
  	public int compare(Player one, Player other)
  	{
  		return one.jerseyNumber - other.jerseyNumber;
  	}
  };
}

/**
 * Domain object that stores data relating to Goalies (extends Player).
 * Players shoot on goal but goalies can also save goals (in addition to
 * doing everything else a Player can do). This is reflected in the
 * inheritance structure.
 *
 * @see Player
 * @see Team
 * @see Shot
 * @see Infraction 
 * @see League
 */
class Goalie
{
  // Umple Code //

  isA Player;
  1 -- * Shot saves;

  // Java Code //

  /**
   * Method returning the total number of successful Saves.
   *
   * @return total number of successful Saves
   *
   * @see Shot
   */
  public int getSuccessfulSaveCount()
  {
    int res = 0;
    for(Shot save : this.getShots())
    {
      if(!save.getGoal())
      {
        res++;
      }
    }
    return res;
  }
}

/**
 * Domain object that stores data relating to Teams.
 * Teams contain Players, and two Teams play a Game.
 * Teams also belong to a League
 *
 * @param name  the name of the Team
 *
 * @see Players
 * @see Game
 * @see League 
 *
 */
class Team
{
  // Umple Code//

  1 -- * Player players;
  String name;

  // Java Code //
 
  /**
   * Method returning the total number of successful Shots made by Players in the Team.
   *
   * @return total number of successful shots
   *
   * @see Shot
   * @see Player
   */

  public int getTotalShotCount()
  {
    return 0;
  }

  public int getSuccessfulShotCount()
  {
    int res = 0;
    for(Player player : this.getPlayers())
    {
      res += player.getSuccessfulShotCount();
    }
    return res;
  }

  /**
   * Method returning the total number of penalty shots caused by Players in the Team.
   */
  public int getPenaltyShotCount()
  {
    int res = 0;
    for(Player player : this.getPlayers())
    {
      res += player.getPenaltyShotCount();
    }
    return res;
  }

  public int getTotalInfractionCount()
  {
    return this.getRedInfractionCount() + this.getYellowInfractionCount();
  }

  public int getRedInfractionCount()
  {
    int res = 0;
    for(Player player : this.getPlayers())
    {
      res += player.getRedInfractionCount();
    }
    return res;
  }

  public int getYellowInfractionCount()
  {
    int res = 0;
    for(Player player : this.getPlayers())
    {
      res += player.getYellowInfractionCount();
    }
    return res;
  }

  /**
   * Inner class allowing League to sort Teams by name.
   *
   * @see League
   */
  public static Comparator<Team> COMPARE_BY_NAME = new Comparator<Team>()
  {
  	public int compare(Team one, Team other)
  	{
  		return one.name.compareTo(other.name);
  	}
  };
}

/**
 * Domain object that stores data relating a Game.
 * Two teams play a Game. Each Game takes place in a League.
 *
 * @param statTime  start time of the game in seconds since the Unix epoch 
 * @param endTime   start time of the game in seconds since the Unix epoch
 * @param location  location of the game
 * @param score     two dimensional array containing the game's score 
 *                  (uses indices from the Game's Team array)
 * @param victor    array index of the game's victor
 *
 * @see Team 
 * @see League
 */
class Game
{
  1 -- 2 Team games;
  int startTime;
  int endTime;
  String location;
  Integer[] score;
  int victor;
}

/**
 * Domain object that stores data relating to a Shot.
 * Shots are taken by Players and saved by Goalies.
 *
 * @param goal  indicates whether the goal was successful
 * @param time  time of the goal in milliseconds since the start of the Game
 *
 * @see Player
 * @see Goalie
 */
class Shot
{
  boolean goal;
  int time;
}

/**
 * Domain object that stores data relating to an Infraction.
 * Infractions are commited by Players.
 *
 * @param color        indicates whether the infraction resulted in a red or yellow card
 * @param penaltyShot  indicates whether the infraction resulted in a penalty shot
 * @param time         time of the infraction in milliseconds since the start of the game
 */
class Infraction
{
  Color color;
  boolean penaltyShot;
  int time;
}

/**
 * Domain object that stores data relating to the League.
 * Teams, Games, and Players are all tracked by the Leage.
 * Their statistics are amalgamated by the League.
 *
 * @see Team
 * @see Game
 * @see Player
 */
class League
{
  singleton;
  1 -- * Team teams;
  1 -- * Game games;
  1 -- * Player players;
}
//$?[End_of_model]$?

class Player
{
  position 528 302 124 79;
  position.association Player__Shot:shots 34,152 93,0;
  position.association Infraction:infractions__Player 163,126 0,14;
}

class Goalie
{
  position 700 462 109 45;
  position.association Goalie__Shot:shots 0,32 102,72;
  position.association Goalie__Shot:saves 0,30 112,7;
}

class Team
{
  position 252 240 109 130;
  position.association Player:players__Team 163,65 0,2;
}

class Game
{
  position 66 190 109 113;
  position.association Game__Team:games 129,110 0,62;
}

class Shot
{
  position 513 505 112 72;
}

class Infraction
{
  position 753 322 144 72;
}

class League
{
  position 427 22 236 184;
  position.association League__Team:teams 0,10 122,0;
  position.association Game:games__League 0,10 118,0;
  position.association League__Player:players 35,184 161,0;
}

class Infraction
{
  position 753 322 144 72;
}

class League
{
  position 427 22 236 184;
  position.association League__Team:teams 0,10 122,0;
  position.association Game:games__League 0,10 118,0;
  position.association League__Player:players 35,184 161,0;
}
